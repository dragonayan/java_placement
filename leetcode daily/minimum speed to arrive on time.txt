class Solution {
    private static double calculateTotalTime(int[] dist, int speed) {
        double totalTime = 0;
        int n = dist.length;
        for (int i = 0; i < n - 1; i++) {
            totalTime += Math.ceil((double) dist[i] / speed);
        }
        totalTime += (double) dist[n - 1] / speed;
        return totalTime;
    }
    
    public int minSpeedOnTime(int[] dist, double hour) {
           int left = 1;
        int right = (int) 1e9; // 10^9

        while (left <= right) {
            int mid = left + (right - left) / 2;
            double totalTime = calculateTotalTime(dist, mid);
            
            if (totalTime <= hour) {
               
                right = mid-1;
            } else {
                
                left = mid + 1;
            }
        }

        // Check if the minimum speed found is feasible within the given hour.
        return calculateTotalTime(dist, left) <= hour ? left : -1;
    }
}